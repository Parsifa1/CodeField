import marshal
import struct
from typing import List
a = [193, 79, 81, 243, 64, 27, 217, 225, 47, 222, 39, 111, 184, 99, 29, 237, 140, 22, 31, 130, 61, 108, 6, 226, 126, 60, 160, 236, 158, 243, 171, 120, 238, 58, 102, 163, 40, 96, 110, 144, 239, 120, 16, 206, 137, 47, 23, 52, 35, 78, 222, 69, 156, 61, 81, 207, 142, 39, 72, 75, 116, 125, 36, 182, 45, 166, 247, 158, 90, 96, 140, 67, 120, 203, 155, 44, 136, 69, 71, 127, 39, 212, 81, 105, 20, 176, 15, 114, 242, 233, 160, 62, 160, 6, 218, 68, 56, 139, 11, 222, 126, 136, 175, 136, 192, 103, 143, 201, 244, 17, 253, 42, 242, 99, 17, 6, 22, 38, 153, 161, 236, 246, 213, 232, 93, 159, 88, 239, 75, 239, 7, 76, 10, 146, 206, 64, 24, 122, 7, 225, 71, 80, 243, 171, 211, 135, 237, 42, 160, 42, 214, 29, 249, 95, 149, 246, 54, 37, 17, 133, 85, 50, 33, 200, 167, 130, 239, 227, 236, 95, 76, 55, 66, 128, 129, 43, 34, 244, 41, 175, 169, 199, 173, 121, 36, 121, 251, 223, 12, 213, 107, 19, 174, 211, 245, 231, 250, 141, 9, 92, 52, 101, 71, 40, 61, 100, 204, 147, 34, 255, 35, 69, 94, 43, 198, 118, 101, 17, 132, 196, 231, 245, 123, 125, 201, 201, 61, 205, 130, 186, 164, 175, 172, 129, 37, 156, 196, 17, 64, 44, 134, 79, 19, 46, 49, 216, 38, 5, 226, 173, 70, 120, 121, 184, 205, 90, 201, 45, 182, 198, 30, 170, 56, 124, 237, 11, 83, 104, 152, 38, 211, 65, 95, 143, 58, 196, 183, 124, 179, 124, 18, 114, 90, 120, 211, 61, 35, 46, 48, 252, 182, 6, 160, 188, 125, 0, 158, 181, 23, 19, 3, 237, 85, 188, 201, 168, 218, 192, 192, 208, 35, 32, 34, 95, 186, 208, 207, 17, 120, 43, 137, 228, 215, 126, 107, 139, 192, 81, 123, 154, 88, 112, 0, 232, 81, 199, 101, 103, 56, 15, 53, 208, 114, 113, 255, 19, 115, 179, 154, 87, 6, 102, 58, 5, 22, 246, 231, 41, 33, 52, 169, 235, 231, 186, 16, 42, 159, 162, 101, 28, 90, 75, 67, 204, 238, 193, 218, 167, 63, 63, 108, 45, 20, 31, 26, 155, 162, 212, 187, 108, 116, 142, 124, 35, 142, 77, 104, 114, 34, 148, 142, 76, 125, 85, 56, 168, 128, 197, 49, 215, 70, 72, 51, 244, 59, 225, 38, 217, 148, 160, 68, 9, 191, 136, 106, 171, 77, 6, 24, 219, 130, 231, 12, 36, 176, 232, 198, 121, 175, 196, 49, 250, 149, 59, 221, 173, 65, 54, 98, 140, 64, 158, 29, 143, 206, 207, 149, 8, 16, 225, 11, 52, 43, 124, 33, 122, 106, 134, 119, 210, 30, 152, 244, 148, 98, 190, 7, 31, 177, 187, 61, 190, 187, 220, 125, 254, 27, 32, 86, 222, 7, 122, 199, 73, 233, 224, 42, 144, 200, 109, 127, 179, 188, 209, 182, 37, 6, 4, 47, 81, 23, 206, 134, 91, 230, 156, 138, 110, 223, 56, 78, 81, 20, 23, 36, 113, 54, 105, 132, 207, 55, 145, 173, 162, 133, 154, 11, 129, 75, 7, 223, 230, 183, 13, 206, 224, 243, 130, 72, 247, 198, 51, 61, 96, 190, 199, 104, 49, 246, 240, 245, 160, 178, 243, 98, 81, 49, 219, 52, 240, 161, 31, 11, 241, 118, 233, 131, 146, 164, 218, 86, 216, 98, 132, 48, 102, 110, 11, 153, 127, 50, 217, 32, 194, 206, 232, 25, 163, 32, 167, 47, 155, 28, 42, 197, 12, 204, 113, 128, 119, 164, 22, 125, 50, 79, 20, 43, 36, 37, 194, 239, 11, 218, 241, 110, 150, 206, 21, 208, 241, 123, 48, 210, 91, 173, 49, 218, 32, 144, 137, 182, 1, 95, 170, 249, 253, 163, 233, 44, 77, 3, 98, 134, 38, 11, 127, 228, 45, 151, 76, 50, 230, 130, 75, 54, 252, 120, 223, 71, 199, 78, 202, 136, 206, 196, 219, 162, 254, 93, 209, 164, 120, 92, 73, 17, 53, 123, 163, 92, 97, 181, 184, 11, 197, 212, 231, 156, 178, 155, 206, 189, 247, 206, 206, 183, 223, 40, 153, 111, 43, 73, 54, 136, 37, 236, 224, 93, 228, 217, 224, 43, 194, 137, 172, 232, 149, 233, 254, 216, 171, 103, 201, 27, 72, 71, 79, 39, 71, 72, 177, 137, 117, 130, 182, 199, 107, 172, 108, 215, 190, 25, 181, 254, 193, 52, 185, 123, 104, 105, 107, 204, 242, 32, 44, 163, 37, 133, 204, 194, 11, 124, 111, 108, 105, 175, 200, 95, 87, 6, 226, 23, 121, 82, 173, 143, 146, 76, 90, 31, 92, 193, 101, 5, 51, 125, 148, 7, 191, 217, 135, 5, 11, 179, 183, 143, 49, 255, 40, 104, 20, 225, 194, 72, 55, 144, 230, 91, 122, 198, 139, 15, 132, 8, 216, 17, 233, 180, 240, 20, 87, 237, 255, 221, 93, 142, 232, 234, 176, 89, 157, 242, 95, 194, 174, 235, 253, 222, 50, 105, 5, 173, 22, 97, 108, 57, 208, 222, 167, 226, 220, 110, 135, 80, 238, 53, 5, 52, 50, 218, 199, 56, 192, 98, 95, 155, 160, 12, 114, 247, 210, 210, 231, 241, 13, 59, 185, 195, 78, 158, 25, 76, 107, 74, 20, 251, 165, 74, 190, 158, 98, 47, 84, 66, 165, 37, 223, 115, 122, 7, 143, 46, 23, 105, 245, 243, 252, 222, 43, 220, 102, 234, 81, 241, 80, 161, 104, 192, 45, 43, 192, 68, 50, 37, 137, 218, 19, 77, 183, 176, 27, 33, 228, 133, 52, 125, 79, 216, 140, 190, 161, 249, 106, 132, 114, 87, 209, 87, 192, 53, 230, 41, 151, 48, 188, 49, 157, 187, 111, 113, 53, 186, 145, 34, 11, 230, 42, 216, 211, 116, 32, 16, 181, 222, 91, 2, 217, 39, 155, 96, 217, 155, 226, 26, 251, 163, 89, 176, 161, 229, 79, 1, 215, 3, 40, 176, 241, 5, 90, 65, 82, 125, 112, 14, 192, 52, 242, 247, 150, 98, 227, 170, 162, 190, 149, 249, 243, 97, 221, 89, 26, 162, 154, 221, 25, 48, 199, 153, 15, 81, 199, 227, 152, 75, 88, 29, 58, 69, 3, 10, 62, 96, 7, 68, 218, 216, 245, 74, 191]
class b:
    def __init__(self, val: int):
        assert isinstance(val, int)
        self.val = val
    def __add__(self, other):
        return b((self.val + other.val) & 0xffffffff)
    def __xor__(self, other):
        return b(self.val ^ other.val)
    def __lshift__(self, nbit: int):
        c = (self.val << nbit % 32) & 0xffffffff
        d = (self.val & 0xffffffff) >> (32 - (nbit % 32))
        return b(c | d)
    def __repr__(self):
        return hex(self.val)
    def __int__(self):
        return int(self.val)
def e(f: b, b: b, g: b, d: b):
    f += b
    d ^= f
    d <<= 16
    g += d
    b ^= g
    b <<= 12
    f += b
    d ^= f
    d <<= 8
    g += d
    b ^= g
    b <<= 7
    return f, b, g, d
def h(i: List[b], idx1, idx2, idx3, idx4):
    i[idx1], i[idx2], i[idx3], i[idx4] = e(i[idx1], i[idx2], i[idx3], i[idx4])
def j(i: List[b]):
    h(i, 0, 4, 8, 12)
    h(i, 1, 5, 9, 13)
    h(i, 2, 6, 10, 14)
    h(i, 3, 7, 11, 15)
    h(i, 0, 5, 10, 15)
    h(i, 1, 6, 11, 12)
    h(i, 2, 7, 8, 13)
    h(i, 3, 4, 9, 14)
    return i
def k(i: List[b]) -> List[bytes]:
    return b''.join([struct.pack('<I', int(l)) for l in i])
def m(n: bytes, o: int, p: bytes) -> bytes:
    q = [b(r) for r in struct.unpack('<IIII', b'expand 32-byte k')]
    n = [b(r) for r in struct.unpack('<IIIIIIII', n)]
    o = [b(o)]
    p = [b(r) for r in struct.unpack('<III', p)]
    i = q + n + o + p
    s = i[:]
    for t in range(10):
        i = j(i)
    i = [l + u for l, u in zip(i, s)]
    return k(i)
def v(r: bytes, y: bytes):
    return bytes(f ^ b for f, b in zip(r, y))
def w(n: bytes, o: int, p: bytes, plaintext: bytes):
    g = bytearray(0)
    for x in range(len(plaintext) // 64):
        y = m(n, o + x, p)
        z = plaintext[x * 64:(x + 1) * 64]
        g += v(z, y)
    if len(plaintext) % 64 != 0:
        x = len(plaintext) // 64
        y = m(n, o + x, p)
        z = plaintext[x * 64:]
        g += v(z, y)
    return g
n = bytes.fromhex(
        '000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f')
o = 0x00000001
p = bytes.fromhex('000000000000004a00000000')
f = w(n, o, p, bytearray(a))
#exec(marshal.loads(f))
print(marshal.dumps(f))